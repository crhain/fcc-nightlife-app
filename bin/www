#!/usr/bin/env node
//////////////////////////////////////////////////////////////
// MODULE DEPENDENCIES                                      //
//////////////////////////////////////////////////////////////
const app = require('../app');
//type the following at terminal to set debug environmental variable : export DEBUG=server   
const debug = require('debug')('server');
const http = require('http');

//////////////////////////////////////////////////////////////
// GET PORT FROM ENVIRONMENT AND STORE IN EXPRESS           //
//////////////////////////////////////////////////////////////
const port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

//////////////////////////////////////////////////////////////
// CREATE HTTP SERVER                                       //
////////////////////////////////////////////////////////////// 
var server = http.createServer(app);

//////////////////////////////////////////////////////////////
// START SERVER                                             //
//////////////////////////////////////////////////////////////
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

//////////////////////////////////////////////////////////////
// FUNCTION DEFEINITIONS                                    //
////////////////////////////////////////////////////////////// 

// * Normalize a port into a number, string, or false.
function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

// * Event listener for HTTP server "error" event.
 function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

// * Event listener for HTTP server "listening" event.
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}